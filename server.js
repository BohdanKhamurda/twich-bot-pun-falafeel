const express = require('express');
const fs = require('fs');
const app = express();
const port = process.env.PORT || 3000;
const path = 'data.json'; // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö

// –ú–∞—Å–∏–≤ –∑ —É–ª–æ–≤–∞–º–∏
const responses = [
  { text: "–û–∫—É–Ω—å üêü", probability: 10 },
  { text: "–ö–æ—Ä–æ–ø üêü", probability: 10 },
  { text: "–°–æ–º üêü", probability: 5 },
  { text: "–†–∏–±–∞ –∑ —Ä–∞–∫–æ–º ü¶ûüêü", probability: 5 },
  { text: "–ö–∞–≤—É–Ω üçâ", probability: 3 },
  { text: "–ö—ñ–ª—å–∫–∞ –≤ —Ç–æ–º–∞—Ç—ñ üêüüçÖ", probability: 7 },
  { text: "–û—Å–µ–ª–µ–¥–µ—Ü—å üêü", probability: 8 },
  { text: "–ù—ñ—á–æ–≥–æ üòî", probability: 15 },
  { text: "–§—ñ–≥—É—Ä–∫–∞ –¢—ñ—Ñ—É üéÆ", probability: 1 },
  { text: "–¢—É–Ω–µ—Ü—å üêü", probability: 5 },
  { text: "–õ–æ—Å–æ—Å—å üêü", probability: 5 },
  { text: "–ö—Ä–∞–± ü¶Ä", probability: 3 },
  { text: "–ë—É—Å—ñ–∫ üöê", probability: 2 },
  { text: "–§–æ—Ä–µ–ª—å üêü", probability: 5 },
  { text: "–í—ñ–∑–æ–∫ üõí", probability: 3 },
  { text: "–ë–∞–Ω–∫–∞ —Ü–≤—è—Ö—ñ–≤ ü™õ", probability: 4 },
  { text: "163 –≥—Ä–∏ –≤ Steam üéÆ", probability: 1 },
  { text: "–ü–ª—è—à–∫–∞ —É—Å–∫–∞—Ä—è ü•É", probability: 4 },
  { text: "–ö–∞–±–ª—É–∫ üë†", probability: 6 },
  { text: "–ë—ñ–ª–¥ –¥–ª—è Elden Ring üõ°Ô∏è‚öîÔ∏è", probability: 2 },
  { text: "–§–û–ü —Ç—Ä–µ—Ç—å–æ—ó –≥—Ä—É–ø–∏ üìú", probability: 1 },
  { text: "–°–∞–Ω–¥–∞–ª—ñ ü©¥", probability: 5 },
  { text: "–ê–∫—É–ª–∞ ü¶à", probability: 2 },
  { text: "–ß–∏—Ä—è–∫ –Ω–∞ –∂–æ–ø—ñ üòî", probability: 2 },
  { text: "–ö—ñ—Ç üêà", probability: 4 },
  { text: "–ö–†–ê–ö–ï–ù üêô", probability: 1 },
  { text: "–ü–ª—è—à–∫–∞ —Ä—ñ–∑–¥–≤—è–Ω–æ–≥–æ –û–ø—ñ–ª–ª—è üç∫", probability: 3 },
];

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
let bestCatches = {};
if (fs.existsSync(path)) {
  try {
    const data = fs.readFileSync(path);
    if (data.length > 0) {
      bestCatches = JSON.parse(data);
    }
  } catch (error) {
    console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ JSON –∑ —Ñ–∞–π–ª—É:', error);
    bestCatches = {}; // –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–± º—î–∫—Ç
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª
function saveData() {
  fs.writeFileSync(path, JSON.stringify(bestCatches, null, 2));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –≤–∞–≥–∏ (—á–∏–º –≤–∞–∂—á–µ, —Ç–∏–º —Ä—ñ–¥—à–µ)
function generateRandomWeight() {
  const random = Math.random();
  if (random < 0.5) return (Math.random() * 5).toFixed(2); // –í—ñ–¥ 0 –¥–æ 5 –∫–≥ (50%)
  if (random < 0.8) return (Math.random() * 10 + 5).toFixed(2); // –í—ñ–¥ 5 –¥–æ 15 –∫–≥ (30%)
  if (random < 0.95) return (Math.random() * 20 + 15).toFixed(2); // –í—ñ–¥ 15 –¥–æ 35 –∫–≥ (15%)
  return (Math.random() * 50 + 35).toFixed(2); // –í—ñ–¥ 35 –¥–æ 85 –∫–≥ (5%)
}

// –†–æ—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ !fish
app.get('/fish', (req, res) => {
  const username = req.query.username || "–ì—ñ—Å—Ç—å"; // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∑–∞–ø–∏—Ç—É
  const totalProbability = responses.reduce((sum, item) => sum + item.probability, 0);
  const random = Math.random() * totalProbability;
  let cumulative = 0;

  for (const response of responses) {
    cumulative += response.probability;
    if (random < cumulative) {
      if (response.text === "–ù—ñ—á–æ–≥–æ üòî") {
        return res.send(`${username}, –≤–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–ø—ñ–π–º–∞–ª–∏ xddyou .`);
      }

      const weight = generateRandomWeight();
      const result = `${username} –≤–ø—ñ–π–º–∞–≤ ${response.text} –≤–∞–≥–æ—é ${weight} –∫–≥!`;

      // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —É–ª–æ–≤
      if (
        !bestCatches[username] ||
        parseFloat(weight) > parseFloat(bestCatches[username].weight)
      ) {
        bestCatches[username] = { text: response.text, weight };
        saveData(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      }

      return res.send(result);
    }
  }

  res.send("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!");
});

// –†–æ—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ !bestcatch
app.get('/bestcatch', (req, res) => {
  const username = req.query.username || "–ì—ñ—Å—Ç—å";
  const bestCatch = bestCatches[username];

  if (!bestCatch) {
    return res.send(`${username} —â–µ –Ω–µ –º–∞—î –∂–æ–¥–Ω–æ–≥–æ —É–ª–æ–≤—É.`);
  }

  res.send(
    `${username} –Ω–∞–π–∫—Ä–∞—â–∏–π —É–ª–æ–≤: ${bestCatch.text} –≤–∞–≥–æ—é ${bestCatch.weight} –∫–≥!`
  );
});

// –†–æ—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ !leaderboard
app.get('/leaderboard', (req, res) => {
  // –°–æ—Ä—Ç—É—î–º–æ —É–ª–æ–≤–∏ –∑–∞ –≤–∞–≥–æ—é —É —Å–ø–∞–¥–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
  const sortedCatches = Object.entries(bestCatches)
    .sort(([, a], [, b]) => parseFloat(b.weight) - parseFloat(a.weight))
    .slice(0, 5); // –¢–æ–ø-5

  if (sortedCatches.length === 0) {
    return res.send("–ù—ñ—Ö—Ç–æ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–ø—ñ–π–º–∞–≤!");
  }

  const leaderboard = sortedCatches
    .map(
      ([username, catchData], index) =>
        ` ${index + 1}. ${username}: ${catchData.text} –≤–∞–≥–æ—é ${catchData.weight} –∫–≥`
    )
    .join("\n");

  res.send(`–¢–æ–ø-5 –Ω–∞–π–∫—Ä–∞—â–∏—Ö —É–ª–æ–≤—ñ–≤:\n${leaderboard}`);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
