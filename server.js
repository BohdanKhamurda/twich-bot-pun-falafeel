const express = require('express');
const fs = require('fs');
const app = express();
const port = process.env.PORT || 3000;
const path = 'data.json'; // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
const roshenPath = 'roshen.json'; // –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è —Ü—É–∫–µ—Ä–æ–∫

const rules = [
  "–ú'—è–∫–∏–π –∑–Ω–∞–∫ (—å) –ø–∏—à–µ—Ç—å—Å—è –ø—ñ—Å–ª—è –º'—è–∫–∏—Ö –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–∏—Ö, –∞–ª–µ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è —à–∏–ø–ª—è—á–∏—Ö, —è–∫-–æ—Ç '–∂', '—á', '—à'. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: '–∫—ñ–Ω—å', '–ø—ñ—Å–Ω—è', –∞–ª–µ '–Ω—ñ–∂–∫–∞'.",
  "–ü–æ–¥–≤–æ—î–Ω–Ω—è –ª—ñ—Ç–µ—Ä –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤ —Å–ª–æ–≤–∞—Ö —ñ–Ω—à–æ–º–æ–≤–Ω–æ–≥–æ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: '–≤–∞–Ω–Ω–∞', '–±—Ä–∏–ª—ñ–∞–Ω—Ç'. –£ –∑–∞–≥–∞–ª—å–Ω–∏—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö –ø–æ–¥–≤–æ—î–Ω–Ω—è –∑–∞–∑–≤–∏—á–∞–π –Ω–µ–º–∞—î.",
  "–ü—Ä–µ—Ñ—ñ–∫—Å '–∑-' —á–∏ '—Å-' –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–≤—É–∫–∞. –ü–µ—Ä–µ–¥ –≥–ª—É—Ö–∏–º–∏ –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–∏–º–∏ (–∫, –ø, —Ç, —Ñ, —Ö) –ø–∏—à–µ–º–æ '—Å-': '—Å–ø–∏—Ç–∞—Ç–∏', –∞ –ø–µ—Ä–µ–¥ —ñ–Ω—à–∏–º–∏ ‚Äî '–∑-': '–∑—Ä–æ–±–∏—Ç–∏'.",
  " '–ò' —á–∏ '—ñ' –ø—ñ—Å–ª—è –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–∏—Ö: —è–∫—â–æ –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–∏–π —Ç–≤–µ—Ä–¥–∏–π ‚Äî –ø–∏—à–µ–º–æ '–∏': '—Å–∏–Ω'. –Ø–∫—â–æ –º'—è–∫–∏–π –∞–±–æ —à–∏–ø–ª—è—á–∏–π ‚Äî –ø–∏—à–µ–º–æ '—ñ': '–º—Ä—ñ—è', '–Ω—ñ–∂'.",
  "–ê–ø–æ—Å—Ç—Ä–æ—Ñ (') —Å—Ç–∞–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è —Ç–≤–µ—Ä–¥–∏—Ö –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–∏—Ö –ø–µ—Ä–µ–¥ '—è', '—é', '—î', '—ó': '–ø'—è—Ç—å', '–±—É—Ä'—è–Ω'.",
  "–ü–æ–¥–≤–æ—î–Ω–Ω—è –º'—è–∫–∏—Ö –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–∏—Ö: —è–∫—â–æ —Å–ª–æ–≤–æ –º–∞—î –ø–æ–¥–æ–≤–∂–µ–Ω–Ω—è, –ø–∏—à–µ–º–æ –¥–≤—ñ –æ–¥–Ω–∞–∫–æ–≤—ñ –ª—ñ—Ç–µ—Ä–∏: '–∂–∏—Ç—Ç—è', '–∑–Ω–∞–Ω–Ω—è'.",
  "'–£' —á–∏ '–≤' –¥–ª—è –º–∏–ª–æ–∑–≤—É—á–Ω–æ—Å—Ç—ñ: –ø–∏—à–µ–º–æ '—É', —è–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Å–ª–æ–≤–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ –≥–æ–ª–æ—Å–Ω—É, —ñ '–≤' ‚Äî –ø—ñ—Å–ª—è –ø—Ä–∏–≥–æ–ª–æ—Å–Ω–æ—ó. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: '—É –Ω–µ–±—ñ', '–≤ –ö–∏—î–≤—ñ'.",
  "–†–æ–¥–æ–≤–∏–π –≤—ñ–¥–º—ñ–Ω–æ–∫ —á–æ–ª–æ–≤—ñ—á–æ–≥–æ —Ä–æ–¥—É: —è–∫—â–æ –π–¥–µ—Ç—å—Å—è –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ä—ñ—á —á–∏ –æ—Å–æ–±—É, –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è -–∞: '–ª–∏—Å—Ç–∞', '–±—Ä–∞—Ç–∞'. –Ø–∫—â–æ —Ü–µ –ø–æ–Ω—è—Ç—Ç—è —á–∏ –∑–±—ñ—Ä–Ω–µ —Å–ª–æ–≤–æ, —Ç–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è -—É: '—Å–Ω—ñ–≥—É', '—á–∞—Å—É'.",
  "–í–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏: —ñ–º–µ–Ω–∞ –ª—é–¥–µ–π, —Å–≤—è—Ç —Ç–∞ —É—Å—Ç–∞–Ω–æ–≤ –ø–∏—à—É—Ç—å—Å—è –∑ –≤–µ–ª–∏–∫–æ—ó: '–¢–∞—Ä–∞—Å –®–µ–≤—á–µ–Ω–∫–æ', '–î–µ–Ω—å –Ω–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ'.",
  "'–ù–µ' –∑ –¥—ñ—î—Å–ª–æ–≤–∞–º–∏ –ø–∏—à–µ—Ç—å—Å—è –æ–∫—Ä–µ–º–æ: '–Ω–µ –∑–Ω–∞—é', '–Ω–µ –±–∞—á—É'.",
  "–Ø–∫—â–æ –¥–æ —á–∏—Å–ª–∞ –¥–æ–¥–∞—Ç–∏ –Ω—É–ª—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–º—ñ–Ω–∏—Ç—å—Å—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 5 + 0 = 5.",
  "–Ø–∫—â–æ –≤—ñ–¥ —á–∏—Å–ª–∞ –≤—ñ–¥–Ω—è—Ç–∏ –Ω—É–ª—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ª–∏—à–∏—Ç—å—Å—è —Ç–∏–º —Å–∞–º–∏–º —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 7 - 0 = 7.",
  "–ë—É–¥—å-—è–∫–µ —á–∏—Å–ª–æ, –ø–æ–º–Ω–æ–∂–µ–Ω–µ –Ω–∞ –Ω—É–ª—å, –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 9 √ó 0 = 0.",
  "–Ø–∫—â–æ —á–∏—Å–ª–æ –ø–æ–¥—ñ–ª–∏—Ç–∏ –Ω–∞ –æ–¥–∏–Ω–∏—Ü—é, –≤–æ–Ω–æ –Ω–µ –∑–º—ñ–Ω–∏—Ç—å—Å—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 8 √∑ 1 = 8.",
  "–£ –≤–∏—Ä–∞–∑–∞—Ö –∑ –¥—É–∂–∫–∞–º–∏ —Å–ø–µ—Ä—à—É –≤–∏–∫–æ–Ω—É—î–º–æ –¥—ñ—ó –≤ –¥—É–∂–∫–∞—Ö, –ø–æ—Ç—ñ–º –º–Ω–æ–∂–µ–Ω–Ω—è —Ç–∞ –¥—ñ–ª–µ–Ω–Ω—è, –∞ –ª–∏—à–µ –ø–æ—Ç—ñ–º –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è.",
  "–Ø–∫—â–æ —á–∏—Å–ª–æ –º–Ω–æ–∂–∏–º–æ –Ω–∞ —Å—É–º—É, –º–æ–∂–Ω–∞ –æ–∫—Ä–µ–º–æ –ø–æ–º–Ω–æ–∂–∏—Ç–∏ —Ü–µ —á–∏—Å–ª–æ –Ω–∞ –∫–æ–∂–µ–Ω –¥–æ–¥–∞–Ω–æ–∫ —ñ —Å–∫–ª–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.",
  "–î—ñ–ª–∏—Ç–∏ –Ω–∞ –Ω—É–ª—å –Ω–µ –º–æ–∂–Ω–∞. –¶–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ –¥—ñ—è.",
  "–Ø–∫—â–æ –¥–æ–¥–∞—Ç–∏ –¥–æ —á–∏—Å–ª–∞ –π–æ–≥–æ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ –Ω—É–ª—å. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 5 + (-5) = 0.",
  "–ß–∏—Å–ª–æ, –ø–æ–º–Ω–æ–∂–µ–Ω–µ —Å–∞–º–µ –Ω–∞ —Å–µ–±–µ, –Ω–∞–∑–∏–≤–∞—î—Ç—å—Å—è –∫–≤–∞–¥—Ä–∞—Ç–æ–º —Ü—å–æ–≥–æ —á–∏—Å–ª–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 4 √ó 4 = 16.",
  "–Ø–∫—â–æ —á–∏—Å–µ–ª—å–Ω–∏–∫ —ñ –∑–Ω–∞–º–µ–Ω–Ω–∏–∫ –¥—Ä–æ–±—É –ø–æ–º–Ω–æ–∂–∏—Ç–∏ –∞–±–æ –ø–æ–¥—ñ–ª–∏—Ç–∏ –Ω–∞ –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ —á–∏—Å–ª–æ (–∫—Ä—ñ–º –Ω—É–ª—è), –∑–Ω–∞—á–µ–Ω–Ω—è –¥—Ä–æ–±—É –Ω–µ –∑–º—ñ–Ω–∏—Ç—å—Å—è.",
  "–†–µ–≥—É–ª—è—Ä–Ω–æ –º–∏–π—Ç–µ —Ä—É–∫–∏: –¶–µ –¥–æ–ø–æ–º–∞–≥–∞—î —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ—à–∏—Ä–µ–Ω–Ω—è –±–∞–∫—Ç–µ—Ä—ñ–π —Ç–∞ –≤—ñ—Ä—É—Å—ñ–≤.",
  "–°–ø—ñ—Ç—å —â–æ–Ω–∞–π–º–µ–Ω—à–µ 7-8 –≥–æ–¥–∏–Ω, —â–æ–± –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å–∏–ª–∏ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∑–¥–æ—Ä–æ–≤'—è.",
  "2-3 –ª—ñ—Ç—Ä–∏ —á–∏—Å—Ç–æ—ó –≤–æ–¥–∏ —â–æ–¥–Ω—è ‚Äî –æ—Å–Ω–æ–≤–∞ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω—ñ–∑–º—É.",
  "–©–æ–¥–Ω—è –æ—á–∏—â—É–π—Ç–µ —Ç–∞ –∑–≤–æ–ª–æ–∂—É–π—Ç–µ —à–∫—ñ—Ä—É –æ–±–ª–∏—á—á—è –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å–µ–∑–æ–Ω—É.",
  "–°–≤–æ—î—á–∞—Å–Ω–æ –ø–µ—Ä—ñ—Ç—å —Ä–µ—á—ñ: –ù–µ –≤—ñ–¥–∫–ª–∞–¥–∞–π—Ç–µ –ø—Ä–∞–Ω–Ω—è, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –ø–æ—è–≤—ñ –ø–ª—è–º —Ç–∞ –∑–∞–ø–∞—Ö—É.",
  "–ß–∏—Å—Ç—ñ—Ç—å –≤–∑—É—Ç—Ç—è –ø—ñ—Å–ª—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏.",
  "–ü—Ä–æ–≤—ñ—Ç—Ä—é–π—Ç–µ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è: –¶–µ –ø–æ–∫—Ä–∞—â—É—î —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –ø–æ—è–≤—ñ –ø–ª—ñ—Å–Ω—è–≤–∏.",
  "–†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–æ–±—ñ—Ç—å –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è.",
  "–ü–æ–ª–∏–≤–∞–π—Ç–µ —Ä–æ—Å–ª–∏–Ω–∏ –≤—á–∞—Å–Ω–æ.",
  "–û—á–∏—â—É–π—Ç–µ –µ–∫—Ä–∞–Ω–∏ —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.",
  "–í–æ–¥—ñ–π —Ç–∞ –≤—Å—ñ –ø–∞—Å–∞–∂–∏—Ä–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –º–∞—é—Ç—å –±—É—Ç–∏ –ø—Ä–∏—Å—Ç–µ–±–Ω—É—Ç—ñ –ø—ñ–¥ —á–∞—Å —Ä—É—Ö—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è.",
  "–£ –Ω–∞—Å–µ–ª–µ–Ω–∏—Ö –ø—É–Ω–∫—Ç–∞—Ö –¥–æ–∑–≤–æ–ª–µ–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å ‚Äî –¥–æ 50 –∫–º/–≥–æ–¥.",
  "–†—É—Ö –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –ª–∏—à–µ –Ω–∞ –∑–µ–ª–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä–∞.",
  "–ù–∞ –ø—ñ—à–æ—Ö—ñ–¥–Ω–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö –≤–æ–¥—ñ—ó –∑–æ–±–æ–≤‚Äô—è–∑–∞–Ω—ñ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø—ñ—à–æ—Ö–æ–¥—ñ–≤.",
  "–ù–µ –ø–æ–≤—ñ–¥–æ–º–ª—è–π—Ç–µ —Å–≤—ñ–π –¥–æ–º–∞—à–Ω—ñ–π –∞–¥—Ä–µ—Å, —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –¥–∞–Ω—ñ —á–∏ –ø–ª–∞–Ω–∏ –ø–æ–¥–æ—Ä–æ–∂–µ–π.",
  "–í—ñ–¥—á–∏–Ω—è–π—Ç–µ –¥–≤–µ—Ä—ñ –ª–∏—à–µ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —Ö—Ç–æ —Å—Ç–æ—ó—Ç—å –∑–∞ –Ω–∏–º–∏.",
  "–ù–æ—Å—ñ—Ç—å —Å–≤—ñ—Ç–ª–æ–≤—ñ–¥–±–∏–≤–∞–ª—å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —É —Ç–µ–º–Ω—É –ø–æ—Ä—É.",
  "–ù–µ –∑–∞–ª–∏—à–∞–π—Ç–µ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ –µ–ª–µ–∫—Ç—Ä–æ–ø—Ä–∏–ª–∞–¥–∏ –±–µ–∑ –Ω–∞–≥–ª—è–¥—É.",
  "–ü—Ä–∏–π–º–∞–π—Ç–µ –¥—É—à –ø–µ—Ä–µ–¥ –ø–ª–∞–≤–∞–Ω–Ω—è–º.",
  "–ù–µ –±—ñ–≥–∞–π—Ç–µ –±—ñ–ª—è –±–∞—Å–µ–π–Ω—É.",
  "–ù–µ —Å—Ç—Ä–∏–±–∞–π—Ç–µ —É –≤–æ–¥—É –±–µ–∑ –¥–æ–∑–≤–æ–ª—É.",
  "–ù–µ –ø—ñ—Ä–Ω–∞–π—Ç–µ —É –º—ñ–ª–∫—ñ–π –≤–æ–¥—ñ.",
  "–ù–µ –∑–∞—Ö–æ–¥—å—Ç–µ —É –≤–æ–¥—É –ø—ñ–¥ —á–∞—Å —à—Ç–æ—Ä–º—É.",
  "–°–æ—Å–∞–≤?",
  "–ù–µ –ø–ª–∞–≤–∞–π—Ç–µ –¥–∞–ª–µ–∫–æ –≤—ñ–¥ –±–µ—Ä–µ–≥–∞.",
  "–°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –¥—ñ—Ç—å–º–∏ –±—ñ–ª—è –≤–æ–¥–∏.",
  "–ì—Ä–æ–º–∞–¥—è–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ —Å–≤–æ–±–æ–¥—É –¥—É–º–∫–∏ —ñ —Å–ª–æ–≤–∞.",
  "–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü—ñ—è –£–∫—Ä–∞—ó–Ω–∏ –≥–∞—Ä–∞–Ω—Ç—É—î –ø—Ä–∞–≤–æ –Ω–∞ –æ—Å–≤—ñ—Ç—É.",
  "–í –£–∫—Ä–∞—ó–Ω—ñ –Ω–µ –¥–æ–ø—É—Å–∫–∞—î—Ç—å—Å—è –ø—Ä–∏–º—É—Å–æ–≤–∞ –ø—Ä–∞—Ü—è.",
  "–ö–æ–∂–µ–Ω –≥—Ä–æ–º–∞–¥—è–Ω–∏–Ω –º–∞—î –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ö–æ—Ä–æ–Ω—É –∑–¥–æ—Ä–æ–≤'—è.",
  "–†—ñ–≤–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤ —ñ —Å–≤–æ–±–æ–¥ –Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Ä–∞—Å–∏ —á–∏ –ø–µ—Ä–µ–∫–æ–Ω–∞–Ω—å.",
  "–ë–æ—ó –π–¥—É—Ç—å –æ–¥–∏–Ω –∑–∞ —ñ–Ω—à–∏–º.",
  "–ó–Ω—ñ–º–∞—Ç–∏ –≤–∑—É—Ç—Ç—è —Ç–∞ —Å–æ—Ä–æ—á–∫–∏.",
  "–Ø–∫—â–æ —à–∞—à–∫–∞ –æ–¥–Ω–æ–≥–æ –∑ –≥—Ä–∞—é—á–∏—Ö –ø—Ä–æ–Ω–∏–∫–Ω–µ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä—è–¥—É, —Ç–æ –≤–æ–Ω–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ –¥–∞–º–∫—É.",
  "–•–æ–¥–∏ –≤ —à–∞—Ö–∞—Ö –∑–¥—ñ–π—Å–Ω—é—é—Ç—å—Å—è –≥—Ä–∞–≤—Ü—è–º–∏ –ø–æ —á–µ—Ä–∑—ñ.",
  "–ü–µ—Ä–µ–≤–µ–∑–µ–Ω–Ω—è –±–∞–≥–∞–∂—É –ø—ñ–¥–ª—è–≥–∞—î –æ–ø–ª–∞—Ç—ñ –æ–∫—Ä–µ–º–æ –∑–∞ –∫–æ–∂–Ω–µ –º—ñ—Å—Ü–µ.",
  "–ó–∞–≤–∂–¥–∏ –ø–æ–≤–æ–¥—å—Ç–µ—Å—è –∑—ñ –∑–±—Ä–æ—î—é —Ç–∞–∫, –Ω—ñ–±–∏ –≤–æ–Ω–∞ –∑–∞—Ä—è–¥–∂–µ–Ω–∞.",
  "–ù—ñ–∫–æ–ª–∏ –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–±—Ä–æ—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç, –∞–±–æ –Ω–∞ —ñ—Å—Ç–æ—Ç—É, —è–∫—É –Ω–µ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è –∑–Ω–∏—â–∏—Ç–∏.",
  "–Ø–∫—ñ –ø—Ä–∞–≤–∏–ª–∞? –Ü–¥–∏ —Ç—Ä–∞–≤—É –ø–æ—Ç—Ä–æ–≥–∞–π."
];

// –ú–∞—Å–∏–≤ –∑ —É–ª–æ–≤–∞–º–∏
const responses = [
  { text: "–û–∫—É–Ω—å üêü", probability: 15 },
  { text: "–ö–æ—Ä–æ–ø üêü", probability: 15 },
  { text: "–°–æ–º üêü", probability: 8 },
  { text: "–†–∏–±–∞ –∑ —Ä–∞–∫–æ–º ü¶ûüêü", probability: 8 },
  { text: "–ö–∞–≤—É–Ω üçâ", probability: 3 },
  { text: "–ö—ñ–ª—å–∫–∞ –≤ —Ç–æ–º–∞—Ç—ñ üêüüçÖ", probability: 7 },
  { text: "–û—Å–µ–ª–µ–¥–µ—Ü—å üêü", probability: 8 },
  { text: "–ù—ñ—á–æ–≥–æ üòî", probability: 15 },
  { text: "–§—ñ–≥—É—Ä–∫–∞ –¢—ñ—Ñ–∞ üéÆ", probability: 2 },
  { text: "–¢—É–Ω–µ—Ü—å üêü", probability: 8 },
  { text: "–õ–æ—Å–æ—Å—å üêü", probability: 8 },
  { text: "–ö—Ä–∞–± ü¶Ä", probability: 6 },
  { text: "–ë—É—Å—ñ–∫ üöê", probability: 5 },
  { text: "–§–æ—Ä–µ–ª—å üêü", probability: 5 },
  { text: "–í—ñ–∑–æ–∫ üõí", probability: 3 },
  { text: "–ë–∞–Ω–∫–∞ —Ü–≤—è—Ö—ñ–≤ ü™õ", probability: 4 },
  { text: "163 –≥—Ä–∏ –≤ Steam üéÆ", probability: 3 },
  { text: "–ü–ª—è—à–∫–∞ —É—Å–∫–∞—Ä—è ü•É", probability: 6 },
  { text: "–ö–∞–±–ª—É–∫ üë†", probability: 9 },
  { text: "–ë—ñ–ª–¥ –¥–ª—è Elden Ring üõ°Ô∏è‚öîÔ∏è", probability: 2 },
  { text: "–§–û–ü —Ç—Ä–µ—Ç—å–æ—ó –≥—Ä—É–ø–∏ üìú", probability: 2 },
  { text: "–°–∞–Ω–¥–∞–ª—ñ ü©¥", probability: 8 },
  { text: "–ê–∫—É–ª–∞ ü¶à", probability: 2 },
  { text: "–ß–∏—Ä—è–∫ –Ω–∞ –∂–æ–ø—ñ üòî", probability: 2 },
  { text: "–ö—ñ—Ç üêà", probability: 4 },
  { text: "–ö–†–ê–ö–ï–ù üêô", probability: 1 },
  { text: "–ü–ª—è—à–∫–∞ —Ä—ñ–∑–¥–≤—è–Ω–æ–≥–æ –û–ø—ñ–ª–ª—è üç∫", probability: 5 },
  { text: "–ö–∞—à–µ–ª—å –ñ–æ–∂–∏–º–∞", probability: 4 },  
  { text: "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏ –Ω–∞ —Å—Ç—Ä—ñ–º", probability: 1 },  
  { text: "–¢–∞–π–º–∞—á –ê–ª—å—Ñ–æ–Ω—Å–∏—á—É –Ω–∞ 30 —Ö–≤–∏–ª–∏–Ω", probability: 1 },  
  { text: "–ê–≤—Ç–æ—Ç–∞–π–º–∞—á –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω", probability: 1 },  
  { text: "–ì—É–º–æ–≤–∞ –∫–∞—á–∫–∞", probability: 7 },  
  { text: "–§–ª–µ—à", probability: 5 },  
  { text: "–°—Ç—Ä—ñ—Ç", probability: 4 },  
  { text: "–†–æ—è–ª —Ñ–ª–µ—à", probability: 1 },  
  { text: "4 —Ç—É–∑–∞", probability: 4 },  
  { text: "–°–∫—Ä–∏–Ω—è —Å–∫–∞—Ä–±—ñ–≤", probability: 1 },  
  { text: "–ö–≤–∏—Ç–æ–∫ –≤ –ß—ñ–∫–∞“ë–æ", probability: 4 },  
  { text: "–ù–∞–≤—É—à–Ω–∏–∫–∏ –∑–∞ 800 –∑–ª–æ—Ç–∏—Ö", probability: 5 },  
  { text: "–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ —ñ–º–µ–Ω–∏–Ω–∞–º–∏", probability: 2 },
];

// –ú–∞—Å–∏–≤ —Ü—É–∫–µ—Ä–æ–∫ Roshen
const roshenCandies = [
  "–ß–µ—Ä–≤–æ–Ω–∏–π –º–∞–∫",
  "–õ—ñ—â–∏–Ω–∞",
  "–ö–∞—Ä–∞-–ö—É–º",
  "–†–æ–º–∞—à–∫–∞",
  "–ö–∏—ó–≤ –≤–µ—á—ñ—Ä–Ω—ñ–π",
  "–°—Ç—Ä—ñ–ª–∞ –ø–æ–¥—ñ–ª—å—Å—å–∫–∞",
  "Bonny-Fruit",
  "Candy Nut",
  "–†–∞—á–∫–∏",
  "–®–∞–ª–µ–Ω–∞ –±–¥–∂—ñ–ª–∫–∞",
  "Yummi Gummi",
  "–®–∏–ø—É—á–∫–∞",
  "LolliPops",
  "–ë—ñ–º-–ë–æ–º",
  "–ï–∫–ª–µ—Ä",
  "–ë–∞—Ä–±–∞—Ä–∏—Å",
  "–î—é—à–µ—Å",
  "–ú–æ–ª–æ—á–Ω–∞ –∫—Ä–∞–ø–ª—è",
  "–ö–æ—Ä—ñ–≤–∫–∞",
  "–°–ª–∏–≤–∫–∏-–õ–µ–Ω–∏–≤–∫–∏",
  "–®–æ–∫–æ–ª–∞–ø–∫–∏",
  "–ü–µ—Ç—Ä–æ –û–ª–µ–∫—Å—ñ–π–æ–≤–∏—á –ü–æ—Ä–æ—à–µ–Ω–∫–æ",
  "—Ü—É–∫–µ—Ä–∫–∞ –≤—ñ–¥ –ê–í–ö ICANT"
];

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É Roshen
let roshenData = {};
if (fs.existsSync(roshenPath)) {
  try {
    const data = fs.readFileSync(roshenPath);
    if (data.length > 0) {
      roshenData = JSON.parse(data);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Å—Ç–∞–Ω—É Roshen:', error);
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É Roshen —É —Ñ–∞–π–ª
function saveRoshen() {
  fs.writeFileSync(roshenPath, JSON.stringify(roshenData, null, 2));
}

// –†–æ—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
app.get('/random-rule', (req, res) => {
  if (rules.length === 0) {
    return res.status(500).send("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª.");
  }
  const randomRule = rules[Math.floor(Math.random() * rules.length)];
  res.send(randomRule);
});

// –†–æ—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ !roshen
app.get('/roshen', (req, res) => {
  const username = req.query.username; // –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ –∑–∞–ø–∏—Ç—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ?username=–Ü–≤–∞–Ω
  if (!username) {
    return res.status(400).send("–ü–æ–º–∏–ª–∫–∞: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ ?username=–Ü–º'—è");
  }

  if (roshenData[username]) {
    return res.send(`üòÖ ${username}, –≤–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–≤–æ—é —Ü—É–∫–µ—Ä–∫—É —Ü—å–æ–≥–æ —Å—Ç—Ä—ñ–º—É: ${roshenData[username]}`);
  }

  const randomCandy = roshenCandies[Math.floor(Math.random() * roshenCandies.length)];
  roshenData[username] = randomCandy; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ü—É–∫–µ—Ä–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  saveRoshen();

  res.send(`üéâ ${username}, –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ü—É–∫–µ—Ä–∫—É: ${randomCandy}!`);
});

// –†–æ—É—Ç –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É Roshen (–∞–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∞)
app.get('/reset-roshen', (req, res) => {
  roshenData = {}; // –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
  saveRoshen();
  res.send("–°—Ç–∞–Ω –∫–æ–º–∞–Ω–¥–∏ !roshen –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ!");
});

// –†–æ—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ !my-candy
app.get('/my-candy', (req, res) => {
  const username = req.query.username; // –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è –≤ –∑–∞–ø–∏—Ç—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ ?username=–Ü–≤–∞–Ω
  if (!username) {
    return res.status(400).send("–ü–æ–º–∏–ª–∫–∞: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ ?username=–Ü–º'—è");
  }

  if (roshenData[username]) {
    return res.send(`üç¨ ${username}, –≤–∞—à–∞ —Ü—É–∫–µ—Ä–∫–∞: ${roshenData[username]}`);
  }

  res.send(`üòï ${username}, –≤–∏ —â–µ –Ω–µ –æ—Ç—Ä–∏–º—É–≤–∞–ª–∏ —Ü—É–∫–µ—Ä–∫—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !roshen, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–¥–Ω—É.`);
});

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
let bestCatches = {};
if (fs.existsSync(path)) {
  try {
    const data = fs.readFileSync(path);
    if (data.length > 0) {
      bestCatches = JSON.parse(data);
    }
  } catch (error) {
    console.log('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ JSON –∑ —Ñ–∞–π–ª—É:', error);
    bestCatches = {}; // –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–± º—î–∫—Ç
  }
}


// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª
function saveData() {
  fs.writeFileSync(path, JSON.stringify(bestCatches, null, 2));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –≤–∞–≥–∏ (—á–∏–º –≤–∞–∂—á–µ, —Ç–∏–º —Ä—ñ–¥—à–µ)
function generateRandomWeight() {
  const random = Math.random();
  if (random < 0.5) return (Math.random() * 5).toFixed(2); // –í—ñ–¥ 0 –¥–æ 5 –∫–≥ (50%)
  if (random < 0.8) return (Math.random() * 10 + 5).toFixed(2); // –í—ñ–¥ 5 –¥–æ 15 –∫–≥ (30%)
  if (random < 0.95) return (Math.random() * 20 + 15).toFixed(2); // –í—ñ–¥ 15 –¥–æ 35 –∫–≥ (15%)
  return (Math.random() * 50 + 35).toFixed(2); // –í—ñ–¥ 35 –¥–æ 85 –∫–≥ (5%)
}

// –†–æ—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ !fish
app.get('/fish', (req, res) => {
  const username = req.query.username || "–ì—ñ—Å—Ç—å"; // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∑–∞–ø–∏—Ç—É
  const totalProbability = responses.reduce((sum, item) => sum + item.probability, 0);
  const random = Math.random() * totalProbability;
  let cumulative = 0;

  for (const response of responses) {
    cumulative += response.probability;
    if (random < cumulative) {
      if (response.text === "–ù—ñ—á–æ–≥–æ üòî") {
        return res.send(`${username}, –≤–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–ø—ñ–π–º–∞–ª–∏ xddyou .`);
      }

      const weight = generateRandomWeight();
      var result = '';
      if(username == 'pendragon186') {
        result = `${username} –≤–ø—ñ–π–º–∞–≤ –ö–∞–±–ª—É–∫ üë† –≤–∞–≥–æ—é ${weight} –∫–≥!`;
      }
      else if (username == 'ALFONSYCH'){
        result = `${username} –≤–ø—ñ–π–º–∞–≤ –ê–≤—Ç–æ—Ç–∞–π–º–∞—á –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω –≤–∞–≥–æ—é ${weight} –∫–≥!`;
      }
      else if (username == 'Vader2022' && response.text == "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∏ –Ω–∞ —Å—Ç—Ä—ñ–º"){
        result = `${username}, –í–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–ø—ñ–π–º–∞–ª–∏ xddyou .`;
      }
      else {
        result = `${username} –≤–ø—ñ–π–º–∞–≤ ${response.text} –≤–∞–≥–æ—é ${weight} –∫–≥!`;
      }
      

      // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —É–ª–æ–≤
      if (
        !bestCatches[username] ||
        parseFloat(weight) > parseFloat(bestCatches[username].weight)
      ) {
        bestCatches[username] = { text: response.text, weight };
        saveData(); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      }

      return res.send(result);
    }
  }

  res.send("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!");
});

// –†–æ—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ !bestcatch
app.get('/bestcatch', (req, res) => {
  const username = req.query.username || "–ì—ñ—Å—Ç—å";
  const bestCatch = bestCatches[username];

  if (!bestCatch) {
    return res.send(`${username} —â–µ –Ω–µ –º–∞—î –∂–æ–¥–Ω–æ–≥–æ —É–ª–æ–≤—É.`);
  }

  res.send(
    `${username} –Ω–∞–π–∫—Ä–∞—â–∏–π —É–ª–æ–≤: ${bestCatch.text} –≤–∞–≥–æ—é ${bestCatch.weight} –∫–≥!`
  );
});

// –†–æ—É—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ !leaderboard
app.get('/leaderboard', (req, res) => {
  // –°–æ—Ä—Ç—É—î–º–æ —É–ª–æ–≤–∏ –∑–∞ –≤–∞–≥–æ—é —É —Å–ø–∞–¥–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
  const sortedCatches = Object.entries(bestCatches)
    .sort(([, a], [, b]) => parseFloat(b.weight) - parseFloat(a.weight))
    .slice(0, 5); // –¢–æ–ø-5

  if (sortedCatches.length === 0) {
    return res.send("–ù—ñ—Ö—Ç–æ —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–ø—ñ–π–º–∞–≤!");
  }

  const leaderboard = sortedCatches
    .map(
      ([username, catchData], index) =>
        ` ${index + 1}. ${username}: ${catchData.text} –≤–∞–≥–æ—é ${catchData.weight} –∫–≥`
    )
    .join("\n");

  res.send(`–¢–æ–ø-5 –Ω–∞–π–∫—Ä–∞—â–∏—Ö —É–ª–æ–≤—ñ–≤:\n${leaderboard}`);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});
